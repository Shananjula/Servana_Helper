// lib/main.dart
//
// Root app for Servana Helper â€” provides UserProvider + UserGateService
// so BrowseScreen can read context.watch<UserProvider>() and gating works.
//
// Requires:
//   provider, firebase_core, firebase_auth, cloud_firestore, cloud_functions
//
// Note: After changing providers at the root, do a FULL restart (stop + run).
// Hot-restart is sometimes not enough for new providers.

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';
import 'screens/home_screen.dart';

import 'firebase_options.dart'; // generated by FlutterFire CLI
import 'providers/user_provider.dart';
import 'services/user_gate_service.dart';
import 'screens/helper_browse_tasks_screen.dart'; // has HelperBrowseTasksScreen alias to BrowseScreen

Future<void> _initFirebase() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
}

void main() {
  runZonedGuarded(() async {
    await _initFirebase();
    runApp(const ServanaHelperApp());
  }, (error, stack) {
    // ignore: avoid_print
    print('[FATAL] $error\n$stack');
  });
}

class ServanaHelperApp extends StatelessWidget {
  const ServanaHelperApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // App-level auth/profile/provider
        ChangeNotifierProvider(create: (_) => UserProvider(), lazy: false),
        // Instant category gating
        ChangeNotifierProvider(create: (_) => UserGateService(), lazy: false),
      ],
      child: MaterialApp(
        title: 'Servana Helper',
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFF4169E1)),
          useMaterial3: true,
        ),
        localizationsDelegates: const [
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        supportedLocales: const [
          Locale('en'),
          Locale('si'),
          Locale('ta'),
        ],
        home: const HomeScreen(),
      ),
    );
  }
}